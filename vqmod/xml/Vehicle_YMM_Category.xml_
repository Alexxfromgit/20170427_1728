<?xml version="1.0" encoding="UTF-8"?>
<modification>
	<id>Vehicle Year/Make/Model Category Filter</id>
	<version>2.17.0</version>
	<vqmver>2.3.0</vqmver>
	<author>Spot On Solutions http://spotonsolutions.net</author>
	<file name="catalog/model/catalog/category.php">
		<operation>
			<search position="replace"><![CDATA[return $query->rows;]]></search>
			<add><![CDATA[if(isset($this->session->data['ymm'])){
			$available_categories = $this->getCategoriesWithProducts();
			$data = $query->rows;
			foreach($data as $key => &$value){
				if(!in_array($value['category_id'], $available_categories)){
					unset($data[$key]);
				}
			}
			return $data;
		} else {
			return $query->rows;
		}]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[public function getTotalCategoriesByCategoryId($parent_id = 0) {]]></search>
			<add><![CDATA[private function getCategoriesWithProducts(){
		$filter_query = "(p2y.make_id = '" . $this->session->data['ymm']['make'] . "'";
		if(!empty($this->session->data['ymm']['model'])){
			$filter_query .= " AND p2y.model_id = '" . $this->session->data['ymm']['model'] . "'";
		}
		if(!empty($this->session->data['ymm']['engine'])){
			$filter_query .= " AND p2y.engine_id = '" . $this->session->data['ymm']['engine'] . "'";
		}
		if(!empty($this->session->data['ymm']['year'])){
			$filter_query .= " AND p2y.begin_year <= '" . $this->session->data['ymm']['year'] . "' AND p2y.end_year >= '" . $this->session->data['ymm']['year'] . "'";
		}
		$filter_query .= ") OR p.universal = '1'";
		$query = $this->db->query("SELECT DISTINCT category_id FROM " . DB_PREFIX . "product_to_category p2c LEFT JOIN " . DB_PREFIX . "product p on p.product_id = p2c.product_id LEFT JOIN " . DB_PREFIX . "product_to_ymm p2y on p2y.product_id = p.product_id WHERE p.status = '1' AND (" . $filter_query . ")");
		
		$data = array();
		$results = array();
		foreach($query->rows as $row) {
			$results[] = $row['category_id'];
		}
		
		if(strcmp(VERSION, '1.5.5.1') >=0) { //v1.5.5.1 or later
			$data = $this->addPath($results);
		} else {
			$parents = array();
			foreach($results as $result) {
				$parents = array_merge($parents, $this->getCategoryParents($result));
			}
			$data = array_merge($results, $parents);
		}
		return $data;
	}
	
	private function addPath($results) {
		$csv = implode(',', $results);
		$query = $this->db->query('SELECT DISTINCT path_id from ' . DB_PREFIX . 'category_path WHERE category_id IN (' . $csv . ')');
		foreach($query->rows as $row) {
			$data[] = $row['path_id'];
		}
		return $data;
	}

	private function getCategoryParents($category_id) {
		$categories = array();

		$parent_query = $this->db->query("SELECT parent_id from " . DB_PREFIX . "category WHERE category_id = '" . $category_id . "'");

		$parent_id = $parent_query->row['parent_id'];
		if($parent_id != 0) {
			$categories[] = $parent_id;
			$parents = $this->getCategoryParents($parent_id);
			if($parents) {
				$categories = array_merge($parents, $categories);
			}
		}

		return $categories;
	}
	]]></add>
		</operation>
	</file>
</modification>